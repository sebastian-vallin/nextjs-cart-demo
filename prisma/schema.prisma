// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider     = "prisma-client"
  runtime      = "nodejs"
  moduleFormat = "esm"
  output       = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(nanoid())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customerInfos CustomerInfo[]
  carts         Cart[]
}

model Product {
  id          String   @id @default(nanoid())
  name        String
  description String
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  priceId String
  price   Price  @relation(fields: [priceId], references: [id], onDelete: Restrict)

  orderItems OrderItem[]
  cartItems  CartItem[]
}

model Price {
  id        String   @id @default(nanoid())
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products   Product[]
  orderItems OrderItem[]
}

enum OrderStatus {
  PENDING
  PAID
  COMPLETED
  CANCELED
}

model Order {
  id        String      @id @default(nanoid())
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  paidAt       DateTime?
  completedAt  DateTime?
  canceledAt   DateTime?
  cancelReason String?

  customerInfoId String
  customerInfo   CustomerInfo @relation(fields: [customerInfoId], references: [id], onDelete: Restrict)

  orderItems OrderItem[]

  @@index([status, createdAt])
  @@index([customerInfoId, createdAt])
}

model OrderItem {
  id        String   @id @default(nanoid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict)
  priceId   String
  price     Price   @relation(fields: [priceId], references: [id], onDelete: Restrict)

  @@unique([orderId, productId])
  @@index([productId])
}

model CustomerInfo {
  id         String   @id @default(nanoid())
  email      String
  firstName  String
  lastName   String
  address    String
  city       String
  postalCode String
  country    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  orders Order[]
}

model Cart {
  id        String   @id @default(nanoid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  items CartItem[]
}

model CartItem {
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@index([productId])
}
